module One_more_256to4 #(
    parameter TOTAL_BITS = 256,
    parameter WORD_WIDTH = 32,
    parameter NUM_WORDS = TOTAL_BITS / WORD_WIDTH,
    parameter BYTE_WIDTH = 8,
    parameter NUM_BYTES = TOTAL_BITS / BYTE_WIDTH,
    parameter SEARCH_WIDTH = 4,
    parameter INDEX_WIDTH = $clog2(NUM_BYTES)
)(
    input clk,
    input rst,
    input start,
    input [TOTAL_BITS-1:0] unsorted_data,
    input [SEARCH_WIDTH-1:0] search_key,
    input [SEARCH_WIDTH-1:0] xmask,
    output reg [(NUM_WORDS*24)-1:0] indices,
    output reg done
);

    localparam STATE_WIDTH = 2;
    localparam IDLE = 2'd0, LOAD = 2'd1, SORT = 2'd2, BYTE_SORT = 2'd3;
    
    wire [BYTE_WIDTH-1:0] local_match_lines[0:NUM_WORDS-1];
    wire [(TOTAL_BITS/4)-1:0] all_match_lines;
    
    reg [TOTAL_BITS-1:0] byte_sorted_data;
    
    reg [STATE_WIDTH-1:0] state;
    reg [WORD_WIDTH-1:0] data_array [0:NUM_WORDS-1];
    reg [$clog2(NUM_WORDS)-1:0] index_array [0:NUM_WORDS-1];
    reg [TOTAL_BITS-1:0] sorted_data;
    reg [(2*NUM_BYTES-1):0] match_idx;
    reg [INDEX_WIDTH-1:0] match_index_before_sorting;
    reg [SEARCH_WIDTH-1:0] byte_val;
    reg [SEARCH_WIDTH-1:0] masked_search_key;

    reg [2:0] stage;
    reg found;

    wire [WORD_WIDTH-1:0] major_sorted_data [0:NUM_WORDS-1];
    wire [23:0] major_sorted_idx [0:NUM_WORDS-1];
    wire [NUM_WORDS-1:0] major_sort_done;

    reg [WORD_WIDTH-1:0] temp;
    reg [$clog2(NUM_WORDS)-1:0] temp_index;

    function [BYTE_WIDTH-1:0] get_byte;
        input [WORD_WIDTH-1:0] word;
        input [1:0] idx;
        begin
            case (idx)
                2'd0: get_byte = word[31:24];
                2'd1: get_byte = word[23:16];
                2'd2: get_byte = word[15:8];
                2'd3: get_byte = word[7:0];
                default: get_byte = 8'd0;
            endcase
        end
    endfunction

    function compare_words;
        input [WORD_WIDTH-1:0] a, b;
        reg [BYTE_WIDTH-1:0] byte_a, byte_b;
        integer i;
        reg done_flag;
        begin
            compare_words = 0;
            done_flag = 0;
            for (i = 3; i >= 0; i = i - 1) begin
                if (!done_flag) begin
                    byte_a = get_byte(a, i) & ~xmask;
                    byte_b = get_byte(b, i) & ~xmask;
                    if (byte_a > byte_b) begin
                        compare_words = 1;
                        done_flag = 1;
                    end else if (byte_a < byte_b) begin
                        compare_words = 0;
                        done_flag = 1;
                    end
                end
            end
        end
    endfunction

    task compare_swap;
        input integer i, j;
        begin
            if (compare_words(data_array[i], data_array[j])) begin
                temp = data_array[i];
                data_array[i] = data_array[j];
                data_array[j] = temp;

                temp_index = index_array[i];
                index_array[i] = index_array[j];
                index_array[j] = temp_index;
            end
        end
    endtask
    
    generate
        genvar idx;
        for (idx = 0; idx < NUM_WORDS; idx = idx + 1) begin : major_sorters
            idx_sorted_32to4_BS sorter (
                .clk(clk),
                .rst(rst),
                .start(state == BYTE_SORT),
                .unsorted_data({
                    data_array[0][(4*idx)+3 -: 4], data_array[1][(4*idx)+3 -: 4],
                    data_array[2][(4*idx)+3 -: 4], data_array[3][(4*idx)+3 -: 4],
                    data_array[4][(4*idx)+3 -: 4], data_array[5][(4*idx)+3 -: 4],
                    data_array[6][(4*idx)+3 -: 4], data_array[7][(4*idx)+3 -: 4]
                }),
                .search_key(search_key),
                .xmask(xmask),
                .sorted_data(major_sorted_data[idx]),
                .match_lines(local_match_lines[idx]), // optional: connect if needed
                .done(major_sort_done[idx]),
                .sorted_indices(major_sorted_idx[idx]),
                .unsorted_indices()
            );
            assign all_match_lines[idx*8 +: 8] = local_match_lines[idx];
        end
    endgenerate

    integer i;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            done <= 0;
            sorted_data <= 0;
            byte_sorted_data <= 0;
            indices <= 0;
            match_idx <= 0;
            match_index_before_sorting <= {INDEX_WIDTH{1'b1}};
            stage <= 0;
        end else begin
            case (state)
                IDLE: begin
                    done <= 0;
                    if (start) state <= LOAD;
                end

                LOAD: begin
                    for (i = 0; i < NUM_WORDS; i = i + 1) begin
                        data_array[i] <= unsorted_data[i*WORD_WIDTH +: WORD_WIDTH];
                        index_array[i] <= i[$clog2(NUM_WORDS)-1:0];
                    end
                    stage <= 0;
                    state <= SORT;
                end

                SORT: begin
                    case (stage)
                        0: begin compare_swap(0,1); compare_swap(2,3); compare_swap(4,5); compare_swap(6,7); end
                        1: begin compare_swap(0,2); compare_swap(1,3); compare_swap(4,6); compare_swap(5,7); end
                        2: begin compare_swap(0,4); compare_swap(1,5); compare_swap(2,6); compare_swap(3,7); end
                        3: begin compare_swap(1,2); compare_swap(3,4); compare_swap(5,6); end
                        4: begin compare_swap(0,1); compare_swap(2,3); compare_swap(4,5); compare_swap(6,7); end
                        5: begin compare_swap(1,2); compare_swap(3,4); compare_swap(5,6); end
                        6: begin state <= BYTE_SORT; end
                    endcase
                    if (stage < 6) stage <= stage + 1;
                end

                BYTE_SORT: begin
                    if (&major_sort_done) begin
                        for (i = 0; i < NUM_WORDS; i = i + 1) begin
                            sorted_data[i*WORD_WIDTH +: WORD_WIDTH] <= data_array[NUM_WORDS-1-i];
                            indices[i*24 +: 24] <= major_sorted_idx[i];
                            byte_sorted_data[i*WORD_WIDTH +: WORD_WIDTH] <= major_sorted_data[i];
                        end

                        masked_search_key = search_key & ~xmask;
                        match_idx = 0;
                        match_index_before_sorting = {INDEX_WIDTH{1'b1}};
                        found = 0;

                        for (i = 0; i < NUM_BYTES; i = i + 1) begin
                            byte_val = unsorted_data[i*BYTE_WIDTH +: SEARCH_WIDTH] & ~xmask;
                            if (byte_val == masked_search_key) begin
                                match_idx[i] = 1'b1;
                                if (!found) begin
                                    match_index_before_sorting = i[INDEX_WIDTH-1:0];
                                    found = 1;
                                end
                            end
                        end

                        done <= 1;
                        state <= IDLE;
                    end
                end
            endcase
        end
    end

endmodule
